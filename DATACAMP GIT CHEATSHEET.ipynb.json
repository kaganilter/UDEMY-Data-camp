{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- [ ] Every commit to a repository has a unique identifier called a hash , many numbers and characters (alphanumeric) d670460b4b4aece5915caf5c68d12f560a9fe3e4\n",
    "- [ ] cd (file location) takes to that repository\n",
    "- [ ] special label HEAD, always refers to the most recent commit.The label HEAD~1 then refers to the commit before it, while HEAD~2 refers to the commit before that, and so on.\n",
    "- [ ] git show HEAD~1 shows the commit made just before the most recent one.\n",
    "- [ ] git annotate file shows who made the last change to each line of a file and when.\n",
    "- [ ] To see the changes between two commits, you can use git diff ID1..ID2\n",
    "- [ ] git clean -n will show you a list of files that are in the repository, but whose history Git is not currently tracking. A similar command git clean -f will then delete those files. git clean only works on untracked files\n",
    "- [ ] ls shows the list of files in the current directory\n",
    "- [ ] To change a configuration value for all of your projects on a particular computer  git config --global setting.name setting.value\n",
    "- [ ] git checkout -- (file path) to undo the change that you made since the last commit. git checkout (new branch name) switches the branch  . git checkout — .  undo the changes to the last file\n",
    "- [ ] cat is used To view a file and display the content ex: cat (file name)\n",
    "- [ ] git checkout -- data will then restore the files in the previous location\n",
    "- [ ] To list all of the branches in a repository, you can run the command git branch. The branch you are currently in will be shown with a * beside its name.\n",
    "- [ ] git diff branch-1..branch-2 shows the difference between two branches.\n",
    "- [ ] git rm. This removes the file (just like the shell command rm) then stages the removal of that file with git add, all in one step.\n",
    "- [ ] to create a new branch git checkout -b branch-name\n",
    "- [ ] to merge two branches git merge destination \n",
    "- [ ] git add .  adds or stages the changes you did\n",
    "- [ ] to create a new repository, git init project_name\n",
    "- [ ] git init converts the current project onto repositories. if not in the same location. git init  /path/to/project \n",
    "- [ ] to clone, copy a repository, git clone (url)  if you want to clone as a different name write the name to the end\n",
    "- [ ] If you are in a repository, you can list the names of its remotes using git remote. (remotes could be online such as github)\n",
    "- [ ] You can add more remotes using: git remote add remote-name URL\n",
    "- [ ] pulling changes from a remote (like GITHUB) git pull remote branch (first is the repository to be updated, second is from) \n",
    "- [ ] pushes your changes to a remote repository git push remote-name branch-name (from branch name to remote name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
